https://nodejs.org
ES = Ecma Script version 6 = Improvements to OOJS with introduction to classes (Java like syntaxes)
JS = ES version 5 = Object Oriented Programming with JS

ES + Framework => ES + React | ES + Angular | ES + Redux etc

React Framework = UI Framework = Smart HTML
					- Components
					- Binding
					- Routing
					- Communication with HTTP apis
React was possible because reforms in html5. Creation of elements, templatization

Installation required at participant's end
1. VS Code
2. Node (https://nodejs.org)

Node has 2 features
1. Programming & Execution features
2. Tooling features: Eg: install, uninstall, publish, init etc.
		     - Command used: npm, npx

Eg: npm
	>npm install <framework> location=--global

Eg: Install and execute the library commands simultaneously
	Use npx
		>npx create-react-app firstApp

======================================================
Summary
1. JS == ES5 && ES6 = JS + Extra features like classes, scoping, modularization using import, export
2. JSX = Javascript code working with html markup
	Eg: const element = <h1>Hello</h1>
            function Greeting(){
				return <h1>Hello</h1>
				}
3. function keyword can be interchangeably used with class keyword
	eg: function myClass(){}
	    class myClass{}
	    let obj = new myClass();
4. When import, export keywords are used, then we transform the js files into a single unit of executable or a module. 
	> To execute a module, you must use npm command
		eg: npm start
	> To execute a single js file (without keywords import, export), use node command
		eg: node file.js
5. An app is an amalgamation of several frameworks, languages. Each language has its own transpiler.
   Such an application is called polyglot app.
6. For polyglot applications a bundler is used to produce the executables. In react we use Webpack as the module bundler. It is built-in with react-installation

7. Installation of react
	> npx create-react-app jsxapp
8. Running the react app
	>npm start
9. For those who came in late, replace the code in src/App.js with the following
      import logo from './logo.svg';
import './App.css';

//Accessed as <App/>
export default function App() {
  return (
    <h1>Hello React App</h1>
  );
}

const user = {firstname:'Nandagopal', lastname:'M'} //this is a js/es object

//accessed on html as <Greeting/> == Instantiation of the class Greeting 
//In js function can be used for a class
export function Greeting(){
  return (<h3>Namaste {user.firstname} {user.lastname}</h3>);

}

10. Replace the code in  src/index.js with the following

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App, {Greeting} from './App';
import reportWebVitals from './reportWebVitals';

//Fetching the Html DOM to a ReactDOM
//Virtual DOM before rendering the html to index.html
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />  {/*A component in react */}
    <Greeting/>
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();
   

11. Run your app
	>npm start

======================================================================
Using Props & State
Props => Used for communication. Acts as messenger in the DOM hierarchy. This is read-only.

state => Keeps track of changes in a component instance. States are read-and-write kind of objects. Any changeable aspect for a component should be added to state object.

events => Trigger that needs to be handled in a component or in DOM hierarchy
======================================================================
Communication between components
1. Parent-to-child communication
    a. Technique 1: Using props from parent to child through bindings
    b. Technique 2: Nest components. In the container component add the following binding {this.props.children}
                    Now, you can use your component as so
		    <CommentList>
		       <Comment/>
		       <Reply/>
		    </CommentList>
2. Child-to-parent communication: To communicate upwards with the parent component, use custom events as props
                                  Here the child component, should expose a custom event (eventCallback), and this can be handled in the parent component
				  export class Parent extends React.Component {
				    state={name:''}

				    handleCallback = (childData)=>{
					this.setState({name:childData});
				    }				   
				    render() {
					return (
            					<div><Child parentCallback= {this.handleCallback} />
						)
					}
				**Here, parentCallback is the custom event prop created in the Child component
3. Communication with Servers: To communicate with servers, http api provided by ES6+ can be used. Alternatively third-party apis can also be used to make an ajax call. Here we will use the Fetch() API of ES6 to initiate ajax requests.
Fetch APIs return Promise objects. Promise objects are processed using then() function. 
Syntax of then(()=>{},()=>{})
The first parameter of then indicates what should be done if the promise is fulfilled
The second parameter of then indicates what should be done if the promise is rejected

Eg: fetch('https://jsonplaceholder.typicode.com/posts')
         .then((response)=>response.json())
	 .then((json)=>console.log(json))


======================================================================
LAB
Tweak the sticky notes app, to communicate the a server api
Server API Name: https://jsonplaceholder.typicode.com/posts
Each post returned will become a sticky note.
Add css styles and get creative!
======================================================================
























